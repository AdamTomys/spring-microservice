services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: amigoscode
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - postgres
    restart: unless-stopped

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - spring

  rabbitmq:
    image: rabbitmq:3.9.11-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - spring

  zookeeper:
    image: docker.io/bitnami/zookeeper:latest
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - spring

  #  kafka locally, execute below commands in kafka directory:
  #  bin/zookeeper-server-start.sh config/zookeeper.properties
  #  bin/kafka-server-start.sh config/server.properties

  kafka:
    image: docker.io/bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - spring

  customer:
    image: adamtomys/customer:latest
    container_name: customer
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
    depends_on:
      - zipkin
      - rabbitmq
      - postgres
      - kafka

  reports:
    image: adamtomys/reports:latest
    container_name: reports
    ports:
      - "8085:8085"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
    depends_on:
      - zipkin
      - postgres
      - kafka

  fraud:
    image: adamtomys/fraud:latest
    container_name: fraud
    ports:
      - "8081:8081"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
    depends_on:
      - zipkin
      - postgres

  notifications:
    image: adamtomys/notifications:latest
    container_name: notifications
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
    depends_on:
      - zipkin
      - rabbitmq
      - postgres
      - kafka

#  eureka-server:
#    image: adamtomys/eureka-server:latest
#    container_name: eureka-server
#    ports:
#      - "8761:8761"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    networks:
#      - spring
#    depends_on:
#      - zipkin
#
#  apigw:
#    image: adamtomys/apigw:latest
#    container_name: apigw
#    ports:
#      - "8083:8083"
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    networks:
#      - spring
#    depends_on:
#      - zipkin
#      - eureka-server

#  loki:
#    image: grafana/loki:2.2.1
#    container_name: loki-service
#    volumes:
#      - /Users/Adam/Documents/Projekty/microservices/amigo:/etc/loki/
#    ports:
#      - "3100:3100"
#    command: -config.file=/etc/loki/loki.yml
#    networks:
#      - loki
#
#  promtail:
#      image: grafana/promtail:2.2.1
#      container_name: promtail-service
#      volumes:
#        - /Users/Adam/Documents/Projekty/microservices/amigo/eureka-server/logs:/var/log
#        - /Users/Adam/Documents/Projekty/microservices/amigo:/etc/promtail/
#      command: -config.file=/etc/promtail/promtail.yml
#      networks:
#        - loki
#
#  grafana:
#      image: grafana/grafana:latest
#      container_name: grafana-service
#      ports:
#        - "3000:3000"
#      networks:
#        - loki

networks:
  loki:
    driver: bridge
  postgres:
    driver: bridge
  spring:
    driver: bridge

volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  postgres:
  pgadmin: